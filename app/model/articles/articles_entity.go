// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package articles

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table articles.
type Entity struct {
    Id         uint        `orm:"id,primary"  json:"id"`          //                                
    Title      string      `orm:"title"       json:"title"`       // 文章标题                       
    Summary    string      `orm:"summary"     json:"summary"`     // 文章简介绍                     
    CategoryId int         `orm:"category_id" json:"category_id"` // 文章栏目ID                     
    Tags       string      `orm:"tags"        json:"tags"`        // 文章标签集合                   
    Cover      string      `orm:"cover"       json:"cover"`       // 文章封面                       
    Content    string      `orm:"content"     json:"content"`     // 文章内容                       
    MdContent  string      `orm:"md_content"  json:"md_content"`  // 文章markdown内容               
    From       int         `orm:"from"        json:"from"`        // 文章来源:0-原创/1-转载/2-其他  
    Status     int         `orm:"status"      json:"status"`      // 文章状态:1-发布/2-草稿/3-隐藏  
    CreatedAt  *gtime.Time `orm:"created_at"  json:"created_at"`  //                                
    UpdatedAt  *gtime.Time `orm:"updated_at"  json:"updated_at"`  //                                
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}